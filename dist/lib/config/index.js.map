{"version":3,"sources":["../lib/config/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { ExecuteEnvironment } from \"../model/execute_env\";\nimport { ApiWorkspace } from \"../model/api_workspace\";\nimport { argv as args } from \"yargs\";\nimport { getProcessId } from \"../utils\";\nimport fs from \"fs\";\nimport { ApiStory } from \"../model/api_story\";\nimport { ApiFlow } from \"../model/api_flow\";\nimport { ApiEnvironment } from \"../model/api_env\";\n// import jsonfile from \"jsonfile\";\n// import path from \"path\";\n\nexport const assertWorkspace = async (): Promise<string> => {\n\tconst processId = getProcessId();\n\tconst workspace = args.workspace as string | null;\n\tif (!workspace) {\n\t\t// workspace must be appointed\n\t\tconsole.error(\n\t\t\t(`Process[${processId}] Please specify workspace folder via [--workspace=folder].`.bold as any).red\n\t\t);\n\t\treturn Promise.reject();\n\t}\n\treturn workspace;\n};\n\nexport const assertAdminURL = async (): Promise<string> => {\n\tconst processId = getProcessId();\n\tconst amdin = args.adminUrl as string | null;\n\tif (!amdin) {\n\t\t// workspace must be appointed\n\t\tconsole.error((`Process[${processId}] Please specify amdinUrl --amdinUrl=url].`.bold as any).red);\n\t\treturn Promise.reject();\n\t}\n\treturn amdin;\n};\n\nconst assertEnv = async (): Promise<string> => {\n\tconst processId = getProcessId();\n\tconst env = args.env as string | null;\n\tif (!env) {\n\t\t// workspace must be appointed\n\t\tconsole.error((`Process[${processId}] Please specify env --env=name].`.bold as any).red);\n\t\treturn Promise.reject();\n\t}\n\treturn env;\n};\n\nconst findEnvConfig = async (workspace: string): Promise<ExecuteEnvironment> => {\n\tconst env = await assertEnv();\n\tconst execute_env = { envs: new Map<string, ApiEnvironment>(), execute_env: env } as ExecuteEnvironment;\n\n\tconst adminUrl = args.adminUrl as string;\n\tif (adminUrl) {\n\t\texecute_env.adminUrl = adminUrl;\n\t}\n\n\tconst workspaceId = args.workspaceId as number;\n\tif (workspaceId) {\n\t\texecute_env.workspaceId = workspaceId;\n\t}\n\n\tconst testPlanId = args.testPlanId as number;\n\tif (workspaceId) {\n\t\texecute_env.testPlanId = testPlanId;\n\t}\n\n\tconst envFilePaths = fs.readdirSync(workspace).filter((name) => name.endsWith(\".postman_environment.json\"));\n\tif (envFilePaths) {\n\t\tenvFilePaths.forEach((path) => {\n\t\t\tconst environmentName = path.replace(\".postman_environment.json\", \"\");\n\t\t\tconst environment = { path: `${workspace}/${path}`, environmentName: environmentName } as ApiEnvironment;\n\t\t\texecute_env.envs[environmentName] = environment;\n\t\t});\n\t}\n\treturn execute_env;\n};\n\nexport const loadExecuteEnvironment = async (): Promise<ExecuteEnvironment> => {\n\ttry {\n\t\tconst workspace = await assertWorkspace();\n\t\treturn findEnvConfig(workspace);\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n};\n\nexport const findApiWorkspace = async (): Promise<ApiWorkspace> => {\n\ttry {\n\t\tconst api_workspace = {} as ApiWorkspace;\n\t\tconst workspace = await assertWorkspace();\n\t\tconst dirNames = fs.readdirSync(workspace).filter((name) => {\n\t\t\tconst path = `${workspace}/${name}`;\n\t\t\treturn fs.statSync(path).isDirectory();\n\t\t});\n\n\t\tconst api_stories = dirNames.map((dirName) => {\n\t\t\tconst dir = `${workspace}/${dirName}`;\n\t\t\tconst flowNames = fs.readdirSync(dir).filter((name) => name.endsWith(\".postman_collection.json\"));\n\t\t\tconst api_flows = flowNames.map((flowName) => {\n\t\t\t\treturn {\n\t\t\t\t\tpath: `${dir}/${flowName}`,\n\t\t\t\t\tcollectionName: flowName.replace(\".postman_collection.json\", \"\"),\n\t\t\t\t} as ApiFlow;\n\t\t\t});\n\t\t\treturn { name: dirName, flows: api_flows } as ApiStory;\n\t\t});\n\t\tapi_workspace.stories = api_stories;\n\t\treturn api_workspace;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n};\n"]}