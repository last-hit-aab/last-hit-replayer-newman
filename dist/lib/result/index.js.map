{"version":3,"sources":["../lib/result/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAAgC;AAChC,0CAAoB;AACpB,8CAAwB;AAExB,oCAA4C;AAC5C,kCAAwC;AACxC,+BAAsC;AAEzB,QAAA,cAAc,GAAG;;;;oBACX,qBAAM,wBAAe,EAAE,EAAA;;gBAAnC,SAAS,GAAG,SAAuB;gBACnC,SAAS,GAAG,oBAAY,EAAE,CAAC;gBAC3B,GAAG,GAAG,cAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC1B,WAAW,GAAG,YAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAA1B,CAA0B,CAAC,CAAC;gBAE/E,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,MAAM;oBACtC,OAAO;wBACN,QAAQ,EAAE,MAAM;wBAChB,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS;wBACvC,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,QAAQ;wBACrC,IAAI,EAAE,kBAAQ,CAAC,YAAY,CAAC,cAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC;qBAC1D,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,mBAAY,CAAC,OAAO,CAAC,CAAC;;;;KAGtB,CAAC;AAEF,IAAM,UAAU,GAAG,UAAC,QAAgB;IACnC,IAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;AAClD,CAAC,CAAC","file":"index.js","sourcesContent":["import jsonfile from \"jsonfile\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport { assertWorkspace } from \"../config\";\nimport { getProcessId } from \"../utils\";\nimport { sentToServer } from \"./sent\";\n\nexport const collectResults = async () => {\n\tconst workspace = await assertWorkspace();\n\tconst processId = getProcessId();\n\tconst dir = path.join(\"newman\");\n\tconst resultFiles = fs.readdirSync(dir).filter((name) => name.startsWith(processId));\n\n\tconst results = resultFiles.map((result) => {\n\t\treturn {\n\t\t\tfileName: result,\n\t\t\tstoryName: getRunInfo(result).storyName,\n\t\t\tflowName: getRunInfo(result).flowName,\n\t\t\tjson: jsonfile.readFileSync(path.join(dir + \"/\" + result)),\n\t\t};\n\t});\n\n\tsentToServer(results);\n\n\t// console.log(resultFiles);\n};\n\nconst getRunInfo = (fileName: string): { storyName: string; flowName: string } => {\n\tconst data = fileName.split(\"_\");\n\treturn { storyName: data[1], flowName: data[2] };\n};\n"]}