{"version":3,"sources":["../lib/runner.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,kDAA4B;AAG5B,iCAAuC;AACvC,sDAAgC;AAChC,uBAAuB;AACvB,mCAA0C;AAC1C,8CAAwB;AACxB,gDAA0B;AAG1B,iCAAiC;AAEjC,iEAAiE;AAEpD,QAAA,YAAY,GAAG,UAAC,WAA+B;IAC3D,OAAO,KAAK,CAAC;AACd,CAAC,CAAC;AAEF,IAAM,cAAc,GAAG,UAAC,SAAuB;IAC9C,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;QACxD,OAAO,CAAC,KAAK,CAAE,oCAAoC,CAAC,IAAY,CAAC,GAAG,CAAC,CAAC;QACtE,OAAO,KAAK,CAAC;KACb;SAAM;QACN,OAAO,IAAI,CAAC;KACZ;AACF,CAAC,CAAC;AAEF,IAAM,SAAS,GAAG,UAAC,KAAe,EAAE,IAAa,EAAE,WAA+B,EAAE,IAAS;IAC5F,IAAM,UAAU,GAAG,kBAAQ,CAAC,YAAY,CAAC,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/D,IAAM,SAAS,GAAG,oBAAY,EAAE,CAAC;IACjC,IAAM,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAmB,CAAC;IAE5E,IAAM,GAAG,GAAG,kBAAQ,CAAC,YAAY,CAAC,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,gBAAM;SACJ,GAAG,CAAC;QACJ,UAAU,EAAE,UAAU;QACtB,WAAW,EAAE,GAAG;QAChB,SAAS,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;QAC1B,QAAQ,EAAE,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,cAAY,SAAS,SAAI,KAAK,CAAC,IAAI,SAAI,IAAI,CAAC,cAAc,iBAAc,EAAE,EAAE;KACxG,CAAC;SACD,EAAE,CAAC,OAAO,EAAE,UAAU,GAAG,EAAE,IAAI;QAC/B,kCAAkC;QAClC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACxC,CAAC,CAAC;SACD,EAAE,CAAC,MAAM,EAAE,UAAU,GAAG,EAAE,OAAO;QACjC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI,GAAG,IAAI,OAAO,CAAC,KAAK,EAAE;YACzB,OAAO,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;SACtD;aAAM;YACN,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACzC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SACnB;IACF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEW,QAAA,iBAAiB,GAAG,UAAC,SAAuB,EAAE,WAA+B;IACzF,IAAI,cAAc,CAAC,SAAS,CAAC,EAAE;QAC9B,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,KAAK;YAC/B,OAAO,CAAC,GAAG,CAAC,iBAAe,KAAO,CAAC,CAAC;YACpC,eAAK,CAAC,UAAU,CACf,KAAK,CAAC,KAAK,EACX,UAAC,IAAI,EAAE,IAAI;gBACV,OAAO,CAAC,GAAG,CAAC,iBAAe,IAAI,CAAC,cAAgB,CAAC,CAAC;gBAClD,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YAC3C,CAAC,EACD,uBAAc,CACd,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,8BAA8B;KAC9B;AACF,CAAC,CAAC;AAEW,QAAA,qBAAqB,GAAG,UAAO,SAAuB,EAAE,WAA+B;;SAAO,CAAC","file":"runner.js","sourcesContent":["import { ApiWorkspace } from \"./model/api_workspace\";\nimport { ExecuteEnvironment } from \"./model/execute_env\";\nimport newman from \"newman\";\nimport { ApiStory } from \"./model/api_story\";\nimport { ApiFlow } from \"./model/api_flow\";\nimport { getProcessId } from \"./utils\";\nimport jsonfile from \"jsonfile\";\n// import fs from \"fs\";\nimport { collectResults } from \"./result\";\nimport path from \"path\";\nimport async from \"async\";\nimport { ApiEnvironment } from \"./model/api_env\";\n\n// require newman in your project\n\n// call newman.run to pass `options` object and wait for callback\n\nexport const isOnParallel = (execute_env: ExecuteEnvironment): Boolean => {\n\treturn false;\n};\n\nconst checkWorkspace = (workspace: ApiWorkspace): Boolean => {\n\tif (!workspace.stories || workspace.stories.length == 0) {\n\t\tconsole.error((\"workspace don't have story folder \".bold as any).red);\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n};\n\nconst runNewman = (story: ApiStory, flow: ApiFlow, execute_env: ExecuteEnvironment, next: any) => {\n\tconst collection = jsonfile.readFileSync(path.join(flow.path));\n\tconst processId = getProcessId();\n\tconst api_env = execute_env.envs[execute_env.execute_env] as ApiEnvironment;\n\n\tconst env = jsonfile.readFileSync(path.join(api_env.path));\n\tnewman\n\t\t.run({\n\t\t\tcollection: collection,\n\t\t\tenvironment: env,\n\t\t\treporters: [\"json\", \"cli\"],\n\t\t\treporter: { json: { export: `./newman/${processId}_${story.name}_${flow.collectionName}_result.json` } },\n\t\t})\n\t\t.on(\"start\", function (err, args) {\n\t\t\t// on start of run, log to console\n\t\t\tconsole.log(\"running a collection...\");\n\t\t})\n\t\t.on(\"done\", function (err, summary) {\n\t\t\tconsole.log(\"done\");\n\t\t\tif (err || summary.error) {\n\t\t\t\tconsole.error(\"collection run encountered an error.\");\n\t\t\t} else {\n\t\t\t\tconsole.log(\"collection run completed.\");\n\t\t\t\tnext(err, summary);\n\t\t\t}\n\t\t});\n};\n\nexport const doOnSingleProcess = (workspace: ApiWorkspace, execute_env: ExecuteEnvironment) => {\n\tif (checkWorkspace(workspace)) {\n\t\tworkspace.stories.forEach((story) => {\n\t\t\tconsole.log(`start story ${story}`);\n\t\t\tasync.eachSeries(\n\t\t\t\tstory.flows,\n\t\t\t\t(flow, next) => {\n\t\t\t\t\tconsole.log(`start flow  ${flow.collectionName}`);\n\t\t\t\t\trunNewman(story, flow, execute_env, next);\n\t\t\t\t},\n\t\t\t\tcollectResults\n\t\t\t);\n\t\t});\n\n\t\t// if (next) collectResults();\n\t}\n};\n\nexport const doOnMultipleProcesses = async (workspace: ApiWorkspace, execute_env: ExecuteEnvironment) => {};\n"]}