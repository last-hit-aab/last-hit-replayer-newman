{"version":3,"sources":["../index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,uCAAwE;AACxE,qCAAsD;AACtD,uCAAsF;AAiFtD,kGAjFvB,0BAAiB,OAiFuB;AAAxC,sGAjFmB,8BAAqB,OAiFnB;AA/E9B,IAAM,kBAAkB,GAAG,CAAC,CAAC;AAI7B,MAAM;AAEN,iBAAiB;AACjB;;;;;;GAMG;AAEH,iCAAiC;AACjC,2FAA2F;AAC3F,+FAA+F;AAC/F,qBAAqB;AACrB,KAAK;AAEL,4CAA4C;AAC5C,2CAA2C;AAC3C,KAAK;AAEL,qBAAqB;AACrB,6DAA6D;AAC7D,yCAAyC;AACzC,IAAI;AAEJ,6DAA6D;AAC7D,+CAA+C;AAC/C,8BAA8B;AAC9B,EAAE;AACF,uCAAuC;AACvC,wCAAwC;AACxC,kBAAkB;AAClB,kHAAkH;AAClH,OAAO;AACP,OAAO;AACP,MAAM;AAEN,gHAAgH;AAEhH,iBAAS,CAAC,UAAU,CAAC,CAAC;AACtB,IAAM,GAAG,GAAG;;;;;gBACL,SAAS,GAAG,oBAAY,EAAE,CAAC;gBACjC,OAAO,CAAC,IAAI,CAAE,CAAA,aAAW,SAAS,eAAY,CAAA,CAAC,IAAY,CAAC,KAAK,CAAC,CAAC;;;;gBAItD,qBAAM,+BAAsB,EAAE,EAAA;;gBAApC,GAAG,GAAG,SAA8B;gBACxB,qBAAM,yBAAgB,EAAE,EAAA;;gBAApC,SAAS,GAAG,SAAwB;qBACtC,qBAAY,CAAC,GAAG,CAAC,EAAjB,wBAAiB;gBACpB,qBAAM,8BAAqB,CAAC,SAAS,EAAE,GAAG,CAAC,EAAA;;gBAA3C,SAA2C,CAAC;;;gBAE5C,0BAAiB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;;;;;gBAGnC,OAAO,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC;gBACjB,sBAAO,OAAO,CAAC,MAAM,CAAC,GAAC,CAAC,EAAC;;;;KAgB1B,CAAC;AAIF,sBAAsB;AACtB,UAAU;AACV,UAAU;AACV,OAAO;AACP,wJAAwJ;AACxJ,gJAAgJ;AAChJ,wBAAwB;AACxB,+FAA+F;AAC/F,QAAQ;AACR,sBAAsB;AACtB,iBAAiB;AACjB,kBAAkB;AAClB,QAAQ;AACR,+CAA+C;AAC/C,OAAO;AACP,MAAM;AACN,wCAAwC;AACxC,wCAAwC;AACxC,6CAA6C;AAC7C,OAAO;AACP,0CAA0C;AAC1C,0BAA0B;AAC1B,iCAAiC;AACjC,6DAA6D;AAC7D,cAAc;AACd,gDAAgD;AAChD,OAAO;AACP,QAAQ;AACR,KAAK;AAEL,kBAAe,GAAG,CAAC","file":"index.js","sourcesContent":["import path from \"path\";\nimport async from \"async\";\nimport { loadExecuteEnvironment, findApiWorkspace } from \"./lib/config\";\nimport { startTime, getProcessId } from \"./lib/utils\";\nimport { doOnSingleProcess, doOnMultipleProcesses, isOnParallel } from \"./lib/runner\";\n\nconst PARALLEL_RUN_COUNT = 2;\n\nimport newman from \"newman\";\n\n//TODO\n\n// read parameter\n/**\n * 1. last-hit admin url\n * 2  parllel run number\n * 3  workspace path\n *\n *\n */\n\n// const parametersForTestRun = {\n// \tcollection: path.join(__dirname, \"postman/postman_collection.json\"), // your collection\n// \tenvironment: path.join(__dirname, \"postman/localhost.postman_environment.json\"), //your env\n// \treporters: \"cli\",\n// };\n\n// const parallelCollectionRun = (done) => {\n// \tnewman.run(parametersForTestRun, done);\n// };\n\n// let commands = [];\n// for (let index = 0; index < PARALLEL_RUN_COUNT; index++) {\n// \tcommands.push(parallelCollectionRun);\n// }\n\n// // Runs the Postman sample collection thrice, in parallel.\n// async.parallel(commands, (err, results) => {\n// \terr && console.error(err);\n//\n// \tresults.forEach(function (result) {\n// \t\tvar failures = result.run.failures;\n// \t\tconsole.info(\n// \t\t\tfailures.length ? JSON.stringify(failures.failures, null, 2) : `${result.collection.name} ran successfully.`\n// \t\t);\n// \t});\n// });\n\n// const collection = require(\"../last-hit-paradise/api_test/smk-story/last-hit-admin.postman_collection.json\");\n\nstartTime(\"all-used\");\nconst run = async () => {\n\tconst processId = getProcessId();\n\tconsole.info((`Process[${processId}] started.`.bold as any).green);\n\n\t// (async (): Promise<void> => {\n\ttry {\n\t\tconst env = await loadExecuteEnvironment();\n\t\tconst workspace = await findApiWorkspace();\n\t\tif (isOnParallel(env)) {\n\t\t\tawait doOnMultipleProcesses(workspace, env);\n\t\t} else {\n\t\t\tdoOnSingleProcess(workspace, env);\n\t\t}\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\treturn Promise.reject(e);\n\t}\n\t// })()\n\t// .then(() => {\n\t// \t// console.log(`process[${processId}] exit on 0.`);\n\t// \tprocess.exit(0);\n\t// })\n\t// .catch((reason: string) => {\n\t// \tif (reason === \"jammed\") {\n\t// \t\t// console.log(`process[${processId}] exit on 1024.`);\n\t// \t\tprocess.exit(2);\n\t// \t} else {\n\t// \t\t// console.log(`process[${processId}] exit on 1.`);\n\t// \t\tprocess.exit(1);\n\t// \t}\n\t// });\n};\n\n// export { FlowFile };\nexport { doOnMultipleProcesses, doOnSingleProcess };\n// const run = () => {\n// \tnewman\n// \t\t.run(\n// \t\t\t{\n// \t\t\t\tcollection: require(\"/Users/yifeng/Documents/last-hit-e/github/aab/last-hit-paradise/api_test/smk-story/last-hit-admin.postman_collection.json\"),\n// \t\t\t\tenvironment: require(\"/Users/yifeng/Documents/last-hit-e/github/aab/last-hit-paradise/api_test/last-hit-local.postman_environment.json\"),\n// \t\t\t\treporters: \"cli\",\n// \t\t\t\t// reporter: { json: { export: `./newman/${story.name}/${flow.collectionName}.json` } },\n// \t\t\t},\n// \t\t\tfunction (err) {\n// \t\t\t\tif (err) {\n// \t\t\t\t\tthrow err;\n// \t\t\t\t}\n// \t\t\t\tconsole.log(\"collection run complete!\");\n// \t\t\t}\n// \t\t)\n// \t\t.on(\"start\", function (err, args) {\n// \t\t\t// on start of run, log to console\n// \t\t\tconsole.log(\"running a collection...\");\n// \t\t})\n// \t\t.on(\"done\", function (err, summary) {\n// \t\t\tconsole.log(\"done\");\n// \t\t\tif (err || summary.error) {\n// \t\t\t\tconsole.error(\"collection run encountered an error.\");\n// \t\t\t} else {\n// \t\t\t\tconsole.log(\"collection run completed.\");\n// \t\t\t}\n// \t\t});\n// };\n\nexport default run;\n"]}